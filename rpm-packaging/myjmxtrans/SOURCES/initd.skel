#!/bin/sh
#
# chkconfig: - 90 60
# pidfile: /var/run/@@SKEL_APP@@.pid
# config: /etc/sysconfig/@@SKEL_APP@@
#
### BEGIN INIT INFO
# Provides: @@SKEL_APP@@
# Required-Start: $local_fs $remote_fs $network $named
# Required-Stop: $local_fs $remote_fs $network
# Default-Start: 3 5
# Default-Stop:  0 1 2 6
# Short-Description: run jmxtrans daemon
# Description: jmxtrans is very powerful tool which reads json
#              configuration files of servers/ports and jmx domains - attributes - types
#              and then outputs the data in whatever format you want via special 'Writer' objects which you can code up yourself.
#              It does this with a very efficient engine design that will scale to querying thousands of machines.
### END INIT INFO

#
# init.d / servicectl compatibility (openSUSE)
#
if [ -f /etc/rc.status ]; then
    . /etc/rc.status
    rc_reset
fi

# Source function library.
if [ -r /etc/init.d/functions ]; then
    . /etc/init.d/functions
fi

if [ -f /etc/sysconfig/@@SKEL_APP@@ ]; then
    . /etc/sysconfig/@@SKEL_APP@@
fi

RETVAL=0
prog="@@SKEL_APP@@"
user="@@SKEL_USER@@"
exec="@@SKEL_EXEC@@"
lockdir=/var/lock/subsys
lockfile=$lockdir/@@SKEL_APP@@
config=/etc/sysconfig/@@SKEL_APP@@

start() {
    echo -n $"Starting $prog: "
    touch /var/run/@@SKEL_APP@@.pid
    chown $user /var/run/@@SKEL_APP@@.pid

    # start_daemon on Suse, daemon on RH
    if [ -x /sbin/startproc ]; then
      HOME=@@SKEL_DATADIR@@ startproc -s -e -l @@SKEL_LOGDIR@@/start.log -u $user $exec start
      sleep 1
      RETVAL=$?
    else
      daemon --user=$user $exec start
      RETVAL=$?
    fi

    #$exec start
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && [ -d $lockdir ] && touch $lockfile
}

stop() {
    echo -n $"Stopping $prog: "
    $exec stop
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && [ -d $lockdir ] && rm -f $lockfile
}

status() {
    $exec status
}

restart() {
    daemon --user=$user $exec restart
}

# See how we were called.
case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status
        RETVAL=$?
        ;;
  restart|force-reload|reload)
        restart
        ;;
  *)
        echo $"Usage: $prog {start|stop|restart|force-reload|reload|status}"
        RETVAL=2
esac

exit $RETVAL
